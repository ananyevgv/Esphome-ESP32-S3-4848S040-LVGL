#-------------------------------------------
# WI-FI
#-------------------------------------------

api:
  password: !secret api_pass
  on_client_connected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant "));'
        then:
          - lvgl.label.update: 
              id: ha_status
              text_color: color_blue
         # - script.execute: time_sync_barometr
          
  on_client_disconnected:
    - if:
        condition:
          lambda: 'return (0 == client_info.find("Home Assistant "));'
        then:
          - lvgl.label.update: 
              id: ha_status
              text_color: color_dark_gray
              
ota:
  password: !secret ota_pass
  platform: esphome


  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
 # power_save_mode: none
 
#-------------------------------------------
# TEXT SENSOR
#-------------------------------------------
text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      icon: mdi:ip
    ssid:
      name: "SSID"
      icon: mdi:access-point-network
    mac_address:
      name: "Mac"
      icon: mdi:lan
#-------------------------------------------
# SENSOR
#-------------------------------------------
sensor:
  - platform: wifi_signal
    name: "Wifi"
    update_interval: 60s  
    id: wifi_signal_db
    entity_category: "diagnostic"
    
  # WI-FI Signal
  - platform: wifi_signal
    id: wifi_signal_percent
    update_interval: 30s
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    on_value: 
      then:
        - lvgl.label.update:
            id: wifi_status
            text_color: !lambda |-
              uint8_t wifi_color = (id(wifi_signal_percent).state);
              switch (wifi_color) {
                case 0 ... 25: return lv_color_hex(0xFF0000);
                case 26 ... 50: return lv_color_hex(0xFF8000);
                case 51 ... 75: return lv_color_hex(0xFFFF00);
                case 76 ... 100: return lv_color_hex(0x00FF00);
                default: return lv_color_hex(0x333333);
              }
            text: !lambda |-
              uint8_t wifi_var = (id(wifi_signal_percent).state);
              switch (wifi_var) {
                case 0 ... 25: return std::string("${wifi_25}");
                case 26 ... 50: return std::string("${wifi_50}");
                case 51 ... 75: return std::string("${wifi_75}");
                case 76 ... 100: return std::string("${wifi_100}");
                default: return std::string("${wifi_100}");
              }